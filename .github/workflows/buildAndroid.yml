name: Android Build with SHA256

##To build from subfolder,just modify the 'ANDROID_DIR'

on:
  push:
    #branches: [ "main","master","dev","release" ]
    ##Start build only on these branches
  workflow_dispatch:
  ##Support manual build in 'Actions/workflow'

env:
  #ANDROID_DIR: .
  ##Build from root project(when 'app' folder is just at root)
  ANDROID_DIR: android
  ##Build from 'android' folder(when 'app' folder is in 'root/android' folder), modify it as you need.

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4

      # 新增：设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: false

      - name: Debug Flutter SDK path
        run: |
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "flutter.sdk/packages:"
          ls -la $FLUTTER_ROOT/packages
          echo "dart version:"
          ls -la $FLUTTER_ROOT/bin/cache/dart-sdk/version

      # 彻底清理并初始化
      - name: Reset project
        # 确保在项目根目录执行
        working-directory: .
        run: |
          flutter clean
          rm -rf .dart_tool pubspec.lock
          # 生成 .dart_tool/package_config.json 文件
          flutter pub get

      # 验证环境
      - name: Check versions
        run: |
          flutter --version
          dart --version
#          exit 1

      # 新增：生成 local.properties 并设置 flutter.sdk
      - name: Configure Flutter SDK path
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          echo "flutter.sdk=$FLUTTER_ROOT" > local.properties
          cat local.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}

#      - name: Increase Gradle memory
#        working-directory: ${{ env.ANDROID_DIR }}
#        run: |
#          printf "\norg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g\n" >> gradle.properties

      - name: Make gradlew executable
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          if [ ! -f "gradlew" ]; then gradle wrapper; fi
          chmod +x gradlew

      - name: Setup Flutter plugins
        run: |
          # 示例：确保基础插件存在
          flutter pub add flutter_localizations --sdk=flutter
          flutter pub upgrade

      - name: Prepare Flutter
        run: |
          flutter doctor -v
          flutter config --enable-android
          flutter precache --android


#      - name: Build Debug
#        working-directory: ${{ env.ANDROID_DIR }}
#        run: ./gradlew assembleDebug

      - name: Build Release
        working-directory: ${{ env.ANDROID_DIR }}
        run: ./gradlew assembleRelease

      - name: Generate SHA256 checksums
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          find . -name '*.apk' | while read apk; do
            ls -la $apk
            sha256sum "$apk" > "${apk}.sha256"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: myapk
          path: |
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/debug/*.apk
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/debug/*.sha256
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/release/*.apk
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/release/*.sha256

#      - name: Clean workspace
#        run: |
#          flutter clean
#          cd android && ./gradlew clean
