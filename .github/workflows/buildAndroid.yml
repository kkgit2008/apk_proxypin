name: Android Build with SHA256

on:
  push:
    #branches: [ "main","master","dev","release" ]
    ##Start build only on these branches
  workflow_dispatch: {}
  ##Support manual build in 'Actions/workflow'

env:
  ANDROID_DIR: android
  ##Build from 'android' folder(when 'app' folder is in 'root/android' folder), modify it as you need.

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4

#      # 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true

#      # 彻底清理并初始化
#      - name: Reset project
#        # 确保在项目根目录执行
#        working-directory: .
#        run: |
#          flutter clean
#          rm -rf .dart_tool pubspec.lock
#          echo ">>clean finished"

#      # 生成 local.properties 并设置 flutter.sdk
      - name: Configure Flutter SDK path
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          echo "flutter.sdk=$FLUTTER_ROOT" > local.properties
          # 将sdk路径写入文件
          cat local.properties
          # 打印文件内容

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}

      - name: Cache NDK
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/build-cache
            ~/.android/cache
            ~/Android/Sdk/ndk
          key: ${{ runner.os }}-ndk-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle', '**/app/build.gradle', '**/gradle.properties') }}

      - name: Cache CMake
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches/**/cmake-*
            ~/Android/Sdk/cmake
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/build.gradle', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Increase Gradle memory
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          printf "\norg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g\n" >> gradle.properties

      - name: Make gradlew executable
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          if [ ! -f "gradlew" ]; then gradle wrapper; fi
          chmod +x gradlew


      - name: Setup Flutter plugins
        run: |
          # 获取所有依赖项并生成'.dart_tool/package_config.json'文件
          flutter pub get || exit 1
          # 添加Flutter官方提供的国际化语言支持库
          flutter pub add flutter_localizations --sdk=flutter || exit 1
          # 升级所有依赖包到最新兼容版本
          flutter pub upgrade || exit 1

      - name: Prepare Flutter
        run: |
          # 详细检查Flutter开发环境状态
          flutter doctor -v
          # 显式启用Android平台支持，防止出现未知问题
          flutter config --enable-android
          # 预下载Android平台所需的二进制文件和工具链，减少后续构建时间
          flutter precache --android


      - name: Build Debug
        working-directory: ${{ env.ANDROID_DIR }}
        run: ./gradlew assembleDebug

#      - name: Build Release
#        working-directory: ${{ env.ANDROID_DIR }}
#        run: ./gradlew assembleRelease

      - name: Generate SHA256 checksums
        # working-directory: ${{ env.ANDROID_DIR }}
        run: |
          find ./build/app/outputs -name '*.apk' | while read apk; do
          # 递归查找该目录下所有 .apk 文件，并逐行读取 find 命令的输出（即每个 .apk 文件的路径）
            sha256sum "$apk" > "${apk}.sha256"
            # 计算当前 .apk 文件的 SHA256 哈希值，并写入同名但扩展名为 .sha256 的文件
          done

      - name: Show file paths
        run: |
            echo ">>./build/app/outputs:"
            ls -la ./build/app/outputs
            echo ">>./build/app/outputs/apk/debug:"
            ls -la ./build/app/outputs/apk/debug
            echo ">>./build/app/outputs/flutter-apk:"
            ls -la ./build/app/outputs/flutter-apk
            echo ">>./build/app/outputs/flutter-apk/debug:"
            ls -la ./build/app/outputs/flutter-apk/debug

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: myapk
          path: |
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/debug/*.apk
            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/debug/*.sha256
#            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/release/*.apk
#            ${{ env.ANDROID_DIR }}/app/build/outputs/apk/release/*.sha256

